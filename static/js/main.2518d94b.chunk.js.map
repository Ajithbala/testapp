{"version":3,"sources":["cellcomponent.js","rowcomponent.js","tablecomponent.js","tictactoe.js","App.js","serviceWorker.js","index.js"],"names":["CellComponent","props","counter","clicked","isEvenClick","state","isClicked","args","ele","this","setState","prevstate","document","createElement","classList","add","src","target","appendChild","console","log","className","onClick","renderXoX","bind","index","React","Component","RowComponent","cells","cellSelectFn","cellSelect","isSelected","cellIndexes","map","cell","key","cellSelectCallBack","TableComponent","rows","cellSelection","rowIndexes","row","CellElement","createContext","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNAIaA,EAAb,kDAEI,WAAYC,GAAO,IAAD,8BACd,gBACKC,QAAU,EACf,EAAKC,SAAU,EACvB,EAAKC,aAAc,EACnB,EAAKC,MAAQ,CAACC,WAAW,EAAOJ,QAAS,GALnB,EAFtB,sDAUcK,GAIF,IAKIC,GAPRC,KAAKC,UAAS,SAACC,GAAc,MAAO,CAACT,QAASS,EAAU,MACrDF,KAAKJ,MAAMH,QAAS,IAAI,KACnBM,EAAMI,SAASC,cAAc,QAC7BC,UAAUC,IAAI,WAClBP,EAAIQ,IAAI,eACRT,EAAKU,OAAOC,YAAYV,MAEpBA,EAAMI,SAASC,cAAc,QAC7BC,UAAUC,IAAI,WAClBP,EAAIQ,IAAI,eACRT,EAAKU,OAAOC,YAAYV,IAE5BW,QAAQC,IAAI,gBAxBpB,+BAwCO,OADJD,QAAQC,IAAIX,KAAKR,OAEhB,wBAAIoB,UAAU,YAAcC,QAASb,KAAKc,UAAUC,KAAKf,MAAOgB,MAAShB,KAAKR,MAAMwB,YAzCxF,GAAmCC,IAAMC,WCD5BC,EAAb,kDAEI,WAAY3B,GAAO,IAAD,8BACd,gBACH4B,MAAO,CAAC,EAAE,EAAE,GAFK,EAFtB,qDAUQ,IAAMC,EAAcrB,KAAKR,MAAM8B,WACzBC,EAAavB,KAAKR,MAAM+B,WAElC,OADIb,QAAQC,IAAI,MAAMX,KAAKR,OACpB,wBAAIoB,UAAU,QAAWI,MAAShB,KAAKR,MAAMwB,OAAQhB,KAAKR,MAAMgC,YAAYC,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAAeC,IAAKD,EAAME,mBAAsBP,EAAeE,WAAcA,EAAaP,MAASU,YAbvM,GAAkCT,IAAMC,WCD3BW,EAAb,kDAEI,WAAYrC,GAAO,IAAD,8BACd,gBACKsC,KAAM,CAAC,EAAE,EAAE,GAFF,EAFtB,qDAOa,IAAD,OACVpB,QAAQC,IAAI,QAASX,KAAKR,OACvB,IAAM8B,EAAYtB,KAAKR,MAAMuC,cACvBR,EAAavB,KAAKR,MAAMK,UAC5B,OAAQ,2BAAOe,UAAU,WACrB,gCACA,+BACHZ,KAAKR,MAAMwC,WAAWP,KAAI,SAAAQ,GAAG,OAAG,kBAAC,EAAD,CAAcjB,MAAOiB,EAAKN,IAAMM,EAAMV,WAAaA,EAAaD,WAAYA,EAAaE,YAAe,EAAKhC,MAAMgC,uBAd3J,GAAoCP,IAAMC,WCC7BgB,EAAcjB,IAAMkB,cAAc,SAGPlB,IAAMC,UCI/BkB,MANf,WACE,OACF,kBAAC,EAAD,OCMoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFxC,SAASyC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.2518d94b.chunk.js","sourcesContent":["import React from \"react\";\r\n// import xImage from \"./public/images/x.png\";\r\n// import oImage from \"../public/images/o.png\";\r\nimport {CellElement} from \"./tictactoe\";\r\nexport class CellComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        this.counter = 0;\r\n        this.clicked = false;\r\nthis.isEvenClick = false;\r\nthis.state = {isClicked: false, counter: 0};\r\n    }\r\n\r\n    renderXoX(args){\r\n        \r\n        this.setState((prevstate)=> {return {counter: prevstate+1 }});\r\n        if(this.state.counter %2===0){\r\n            var ele = document.createElement(\"img\");\r\n            ele.classList.add(\"t-image\");\r\n            ele.src=\"images/x.png\"\r\n            args.target.appendChild(ele);  \r\n        } else{\r\n            var ele = document.createElement(\"img\");\r\n            ele.classList.add(\"t-image\");\r\n            ele.src=\"images/o.png\"\r\n            args.target.appendChild(ele);  \r\n        }\r\n        console.log(\"xox render\");\r\n//         debugger;\r\n//         if(this.props.isSelected){\r\n// if(this.isEvenClick){\r\n\r\ndebugger;\r\n \r\n// } else {\r\n//     return  <img className=\"t-image\" src=\"images/x.png\"/>;\r\n// }\r\n\r\n     //   }\r\n    }\r\n\r\n    render(){\r\n   console.log(this.props);\r\n       return (\r\n    <td className=\"t-rowcell\"   onClick={this.renderXoX.bind(this)} index = {this.props.index}>\r\n\r\n\r\n    </td>\r\n       )\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {CellComponent} from \"./cellcomponent\";\r\n\r\nexport class RowComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super();\r\nthis.cells= [0,1,2]\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        const cellSelectFn =this.props.cellSelect\r\n        const isSelected = this.props.isSelected;\r\n        console.log(\"row\",this.props);\r\n    return <tr className=\"t-row\"    index = {this.props.index}>{this.props.cellIndexes.map((cell)=> <CellComponent key={cell} cellSelectCallBack = {cellSelectFn}  isSelected = {isSelected}  index = {cell}></CellComponent>)}</tr>\r\n\r\n       \r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {RowComponent} from \"./rowcomponent\";\r\nexport class TableComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        this.rows= [0,1,2]\r\n    }\r\n\r\n    render(){\r\n  console.log(\"table\", this.props);\r\n     const cellSelect =this.props.cellSelection\r\n     const isSelected = this.props.isClicked;\r\n       return (<table className=\"t-table\">\r\n           <thead></thead>\r\n           <tbody>\r\n       {this.props.rowIndexes.map(row=> <RowComponent index={row} key= {row}  isSelected ={isSelected}  cellSelect={cellSelect}  cellIndexes = {this.props.cellIndexes}  ></RowComponent>)}\r\n       </tbody>\r\n   </table>\r\n       )       \r\n    }\r\n\r\n}","import  React from \"react\";\r\nimport './App.css';\r\nimport {TableComponent} from \"./tablecomponent\";\r\nexport const CellElement = React.createContext('light');\r\n\r\n \r\nexport class TicTacToeComponent extends React.Component{\r\n    constructor(props){\r\n        super()\r\n        this.rows = [0,1,2];\r\n        this.cells = [0,1,2];\r\n        this.state = {\r\n            isClicked : false, \r\n            target:\"\"\r\n        }\r\n\r\n    }\r\n\r\nonCellSelect(args){\r\n    debugger;\r\nconsole.log(\"cell select\",args.target);\r\nthis.setState({isClicked:true, target:args.target});\r\n\r\n}\r\n\r\n    render(){\r\n        const { cellSelect, ...rest } =this.props\r\n    return (\r\n        <CellElement.Provider value={this.state.target}>\r\n        <TableComponent rowIndexes = {this.rows} cellSelection={this.onCellSelect.bind(this)} isClicked={this.state.isClicked}  cellIndexes={this.cells}></TableComponent>\r\n        </CellElement.Provider>\r\n    )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {TicTacToeComponent} from \"./tictactoe\";\nimport {TableComponent} from \"./tablecomponent\"\nfunction App() {\n  return (\n<TableComponent></TableComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}